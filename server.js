const fs = require("fs");
const path = require("path");
const LRU = require("lru-cache");
const express = require("express");
const favicon = require("serve-favicon");
const compression = require("compression");
const microcache = require("route-cache");
const resolve = (file) => path.resolve(__dirname, file);
const { createBundleRenderer } = require("vue-server-renderer");
var bodyParser = require("body-parser");

const isProd = process.env.NODE_ENV === "production";
const useMicroCache = process.env.MICRO_CACHE !== "false";
const serverInfo =
  `express/${require("express/package.json").version} ` +
  `vue-server-renderer/${require("vue-server-renderer/package.json").version}`;

const testData = [
  {
    type: "lx-container-widget",
    label: "容器",
    name: "容器",
    style: { rotate: 0, opacity: 1, width: "100%", height: 667, backgroundColor: "", backgroundImage: "" },
    animation: { name: "", duration: 1 },
    events: [],
    props: { fixed: false, fixedPostion: {} },
    groupStyle: {},
    isLock: false,
    children: [
      {
        type: "lx-image-widget",
        label: "图片",
        name: "图片",
        style: {
          rotate: 0,
          opacity: 1,
          width: 183,
          height: 183,
          borderRadius: "0px",
          boxShadow: "",
          top: 104,
          left: 329,
          outline: "none",
        },
        animation: { name: "", duration: 1 },
        events: [],
        props: {
          src: "https://devres.lingxi.link/lx/wangyi/imgages/203620a0-ef5c-11eb-85a1-2b0dbc8e8524.png",
          alt: "",
        },
        groupStyle: {},
        isLock: false,
        id: 1,
      },
      {
        type: "lx-image-widget",
        label: "图片",
        name: "图片",
        style: {
          rotate: 0,
          opacity: 1,
          width: 183,
          height: 183,
          borderRadius: "0px",
          boxShadow: "",
          top: 112,
          left: 604,
          outline: "none",
        },
        animation: { name: "", duration: 1 },
        events: [],
        props: {
          src: "https://devres.lingxi.link/lx/wangyi/imgages/203620a0-ef5c-11eb-85a1-2b0dbc8e8524.png",
          alt: "",
        },
        groupStyle: {},
        isLock: false,
        id: 2,
      },
      {
        type: "lx-text-widget",
        label: "文字",
        name: "文字",
        style: {
          rotate: 0,
          opacity: 1,
          width: "235px",
          height: "35px",
          borderWidth: "",
          borderColor: "",
          borderRadius: "4px",
          fontSize: "24px",
          fontWeight: 500,
          lineHeight: 1.4,
          letterSpacing: 0,
          textAlign: "center",
          color: "$primary-text-color",
          backgroundColor: "",
          margin: 0,
          top: 330,
          left: 365,
          textShadow: "none",
          outline: "none",
        },
        animation: { name: "", duration: 1 },
        events: [],
        props: { text: "你好111，吊炸天", edit: false },
        groupStyle: {},
        isLock: false,
        id: 3,
      },
      {
        type: "lx-button-widget",
        label: "按钮",
        name: "按钮",
        style: {
          rotate: 0,
          opacity: 1,
          width: "98px",
          height: "40px",
          fontSize: "14px",
          fontWeight: 500,
          borderRadius: "4px",
          lineHeight: "40px",
          textAlign: "center",
          color: "#FFF",
          backgroundColor: "#14A800",
          top: 440,
          left: 406,
          boxShadow: "none",
          outline: "none",
        },
        animation: { name: "", duration: 1 },
        events: [],
        props: { text: "按钮" },
        groupStyle: {},
        isLock: false,
        id: 4,
      },
    ],
    id: 0,
  },
];
const app = express();

app.use(bodyParser.json());

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(
    bundle,
    Object.assign(options, {
      // for component caching
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),
      // this is only needed when vue-server-renderer is npm-linked
      basedir: resolve("./dist"),
      // recommended for performance
      runInNewContext: false,
    })
  );
}

let renderer;
let readyPromise;
const templatePath = resolve("./src/index.template.html");
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, "utf-8");
  const bundle = require("./dist/vue-ssr-server-bundle.json");
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require("./dist/vue-ssr-client-manifest.json");
  renderer = createRenderer(bundle, {
    template,
    clientManifest,
  });
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require("./build/setup-dev-server")(app, templatePath, (bundle, options) => {
    renderer = createRenderer(bundle, options);
  });
}

const serve = (path, cache) =>
  express.static(resolve(path), {
    maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
  });

app.use(compression({ threshold: 0 }));
app.use(favicon("./public/logo-48.png"));
app.use("/dist", serve("./dist", true));
app.use("/public", serve("./public", true));
app.use("/manifest.json", serve("./manifest.json", true));
app.use("/service-worker.js", serve("./dist/service-worker.js"));

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, (req) => useMicroCache && req.originalUrl));

function render(req, res, data) {
  const s = Date.now();

  res.setHeader("Content-Type", "text/html");
  res.setHeader("Server", serverInfo);

  const handleError = (err) => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.code === 404) {
      res.status(404).send("404 | Page Not Found");
    } else {
      // Render Error Page or Redirect
      res.status(500).send("500 | Internal Server Error");
      console.error(`error during render : ${req.url}`);
      console.error(err.stack);
    }
  };

  const context = {
    title: "Ptengine DLP", // default title
    pageData: data,
  };
  console.log("before render");
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }
    res.send(html);
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`);
    }
  });
}

app.get(
  "*",
  isProd
    ? render
    : (req, res) => {
        readyPromise.then(() => render(req, res, testData));
      }
);

app.post("*", (req, res) => {
  readyPromise.then(() => render(req, res, req.body));
});

const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`server started at localhost:${port}`);
});
